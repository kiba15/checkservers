import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";
dotenv.config();

const TOKEN = process.env.TG_TOKEN

console.log('starting bot...')

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// –¢–µ–∫—É—â–∏–π –ø—É—Ç—å
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
const ROOT_DIR = path.join(__dirname, '..');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const DATA_FILE = path.join(ROOT_DIR, 'user_servers.json');


// –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function loadData() {
  if (!fs.existsSync(DATA_FILE)) fs.writeFileSync(DATA_FILE, '{}');
  return JSON.parse(fs.readFileSync(DATA_FILE));
}
function saveData(data) {
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
}

// –ö–æ–º–∞–Ω–¥—ã
const COMMANDS = {
//  ADD: 'add_server',
//  EDIT: 'edit_server',
//  DELETE: 'delete_server',
    HELP: 'help',
};

const COMMAND_BUTTON_LABELS = {
  //[COMMANDS.ADD]: '‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä',
  //[COMMANDS.EDIT]: '‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä',
  //[COMMANDS.DELETE]: '‚ùå –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä',
    [COMMANDS.HELP]: '‚Ñπ –û –±–æ—Ç–µ...', 
};

const userState = {};

function getCommandFromText(text) {
  return Object.entries(COMMAND_BUTTON_LABELS).find(([, label]) => label === text)?.[0] || null;
}

function showUserServersMenu(chatId) {
  const data = loadData();
  const servers = data[chatId] || [];

  const buttons = servers.map(s => [{ text: s.name }]);
  buttons.push(
   // [{ text: COMMAND_BUTTON_LABELS[COMMANDS.ADD] }],
   // [{ text: COMMAND_BUTTON_LABELS[COMMANDS.EDIT] }],
   // [{ text: COMMAND_BUTTON_LABELS[COMMANDS.DELETE] }]
    [{ text: COMMAND_BUTTON_LABELS[COMMANDS.HELP] }]
  );

  bot.sendMessage(chatId, '‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', {
   reply_markup: {
     keyboard: buttons,
     resize_keyboard: true,
      one_time_keyboard: false,
    }
  });
}

const bot = new TelegramBot(TOKEN, { polling: true });

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram-–∫–æ–º–∞–Ω–¥
bot.setMyCommands([
  { command: 'start', description: '‚ÑπÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
  { command: 'add', description: '‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' },
  { command: 'edit', description: '‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' },
  { command: 'delete', description: '‚ùå –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }
]);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text.trim();
  const data = loadData();
  
  const timeoutDefault = 300;
  
  if (!data[chatId]) data[chatId] = [];
  const servers = data[chatId];
  const state = userState[chatId];

  // –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  if (state) {
    switch (state.action) {
      case 'add': {
        const [name, address, timeoutRaw] = text.split(',').map(s => s.trim());


        // Ì†æÌ∑† –û–±—Ä–∞–±–æ—Ç–∫–∞ timeout
        let timeout = null;
        if (timeoutRaw) {
          const parsed = parseInt(timeoutRaw, 10);
          if (isNaN(parsed) || parsed < 10 || parsed > 120000) {
            bot.sendMessage(chatId, "‚ùó –¢–∞–π–º–∞—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 120000 (–º—Å).");
            return;
          }
          timeout = parsed;
        } else {
          timeout = timeoutDefault;
        }

        
        if (name && address) {
        
          //if (!timeout) {
          // timeout = parseInt(timeoutDefault, 10) ;        
          //}     
        
          servers.push({ name, address, timeout});
          saveData(data);
          bot.sendMessage(chatId, `‚úÖ –°–µ—Ä–≤–µ—Ä "${name}" –¥–æ–±–∞–≤–ª–µ–Ω!`);
        } else {
          bot.sendMessage(chatId, "‚ùó –§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ, IP");
        }
        delete userState[chatId];
        return showUserServersMenu(chatId);
      }

      case 'edit_step_1': {
        const server = servers.find(s => s.name === text);
        if (!server) {
          bot.sendMessage(chatId, "‚ùó –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          delete userState[chatId];
        } else {
          userState[chatId] = { action: 'edit_step_2', server };
          bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ "${server.name}" (–∏ —Ç–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Ç–æ ${timeoutDefault} —Å–µ–∫.):`);
        }
        return;
      }

      case 'edit_step_2': {
        const currentData = loadData(); // –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π data
        const currentServers = currentData[chatId] || [];

        // –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏ (–≤–∑—è–ª–∏ –∏–º—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ server)
        const serverToUpdate = currentServers.find(s => s.name === state.server.name);
        if (serverToUpdate) {
        
          const [address_new, timeout_new] = text.split(',').map(s => s.trim());        
        
          serverToUpdate.address = address_new.trim();
          if (timeout_new) {
             serverToUpdate.timeout = timeout_new.trim();
          } else {
             serverToUpdate.timeout = timeoutDefault;
          }
          
          saveData(currentData);
          bot.sendMessage(chatId, `‚ùó –°–µ—Ä–≤–µ—Ä "${serverToUpdate.name}" –æ–±–Ω–æ–≤–ª—ë–Ω!`);
        } else {
          bot.sendMessage(chatId, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
        }
      
        delete userState[chatId];
        return showUserServersMenu(chatId);
      }

      case 'delete': {
        const index = servers.findIndex(s => s.name === text);
        if (index === -1) {
          bot.sendMessage(chatId, "‚ùó –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        } else {
          const name = servers[index].name;
          servers.splice(index, 1);
          saveData(data);
          bot.sendMessage(chatId, `‚ùó –°–µ—Ä–≤–µ—Ä "${name}" —É–¥–∞–ª—ë–Ω.`);
        }
        delete userState[chatId];
        return showUserServersMenu(chatId);
      }
    }
  }

  // –ö–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
  const command = getCommandFromText(text);
  switch (command) {
  //  case COMMANDS.ADD:
   //   userState[chatId] = { action: 'add' };
  //    return bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: `MyServer, 1.2.3.4`");

  //  case COMMANDS.EDIT:
  //    userState[chatId] = { action: 'edit_step_1' };
  //    return bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:");

  //  case COMMANDS.DELETE:
   //   userState[chatId] = { action: 'delete' };
  //    return bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:");
  
    case COMMANDS.HELP:
     userState[chatId] = { action: 'help' };
      return bot.sendMessage(chatId, `–ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ web-—Å–µ—Ä–≤–µ—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ú–µ–Ω—é –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é 1 –º–∏–Ω—É—Ç—É. –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Ç—Ä–µ—Ç—å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ø–æ—Å–ª–µ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ -  ${timeoutDefault} —Å–µ–∫—É–Ω–¥)`); 
  }

  // –ö–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é
  if (text === '/start') return showUserServersMenu(chatId);

  if (text === '/add') {
    userState[chatId] = { action: 'add' };
    return bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (—Ç—Ä–µ—Ç–∏–π –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Ç–∞–π–º–∞—É—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300):\n‚ÑπÔ∏è–ü—Ä–∏–º–µ—Ä: `MyServer, www.myserver.com, 600`");
  }

  if (text === '/edit') {
    userState[chatId] = { action: 'edit_step_1' };
    return bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:");
  }

  if (text === '/delete') {
    userState[chatId] = { action: 'delete' };
    return bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:");
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
  const server = servers.find(s => s.name === text);
  if (server) {
    return bot.sendMessage(chatId, `‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä: ${server.name}\n‚Ñπ Ô∏èIP: ${server.address}\n‚Ñπ  –¢–∞–π–º–∞—É—Ç ${server.timeout} —Å–µ–∫.`);
  }

  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
  bot.sendMessage(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start");
});



export {bot};

