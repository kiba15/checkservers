import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";
dotenv.config();

const token = process.env.TG_TOKEN

console.log('starting bot...')
//let bot = new TelegramBot(token, { polling: false });




//const TelegramBot = require("node-telegram-bot-api");
import fs from "fs";
import path from "path";

// Ì†ΩÌ¥ê –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
const bot = new TelegramBot(token, { polling: true });

import { fileURLToPath } from 'url';
import { dirname } from 'path';

// –≠–º—É–ª—è—Ü–∏—è __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Ì†æÌ∑† –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadData() {
  const DATA_FILE = path.join(__dirname, 'user_servers.json');

  if (!fs.existsSync(DATA_FILE)) {
    fs.writeFileSync(DATA_FILE, "{}");
  }
  return JSON.parse(fs.readFileSync(DATA_FILE));
}

// Ì†ΩÌ≤æ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData(data) {
  const DATA_FILE = path.join(__dirname, 'user_servers.json');
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
}

// Ì†ΩÌ≥å –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function showUserServersMenu(chatId) {
  const data = loadData();
  const servers = data[chatId] || [];

  const buttons = servers.map(server => [{ text: server.name }]);

  // –ö–æ–º–∞–Ω–¥—ã
  buttons.push(
    [{ text: "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞" }],
    [{ text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞" }],
    [{ text: "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞" }]
  );

  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: {
      keyboard: buttons,
      resize_keyboard: true,
      one_time_keyboard: false
    }
  });
}


const userState = {}; // { [chatId]: { action: 'add' | 'edit' | 'delete', contextData } }

bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text.trim();

  const data = loadData();
  if (!data[chatId]) data[chatId] = [];

  const state = userState[chatId];

  // Ì†ºÌæØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
  if (state) {
    if (state.action === 'add') {
      const [name, address] = text.split(",").map(s => s.trim());
      if (name && address) {
        data[chatId].push({ name, address });
        saveData(data);
        bot.sendMessage(chatId, `‚úÖ –°–µ—Ä–≤–µ—Ä "${name}" –¥–æ–±–∞–≤–ª–µ–Ω!`);
      } else {
        bot.sendMessage(chatId, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: MyServer, 1.2.3.4");
      }
      delete userState[chatId];
      return showUserServersMenu(chatId);
    }

    if (state.action === 'edit_step_1') {
      const server = data[chatId].find(s => s.name === text);
      if (!server) {
        bot.sendMessage(chatId, "‚ùó –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        delete userState[chatId];
        return;
      }
      userState[chatId] = { action: 'edit_step_2', server };
      return bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ "${server.name}":`);
    }

    if (state.action === 'edit_step_2') {
      const server = state.server;
      server.address = text;
      saveData(data);
      bot.sendMessage(chatId, `Ì†ΩÌ¥Ñ –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ "${server.name}" –æ–±–Ω–æ–≤–ª—ë–Ω!`);
      delete userState[chatId];
      return showUserServersMenu(chatId);
    }

    if (state.action === 'delete') {
      const index = data[chatId].findIndex(s => s.name === text);
      if (index === -1) {
        bot.sendMessage(chatId, "‚ùó –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      } else {
        const name = data[chatId][index].name;
        data[chatId].splice(index, 1);
        saveData(data);
        bot.sendMessage(chatId, `‚ùå –°–µ—Ä–≤–µ—Ä "${name}" —É–¥–∞–ª—ë–Ω.`);
      }
      delete userState[chatId];
      return showUserServersMenu(chatId);
    }
  }

  // Ì†ΩÌ¥ò –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  switch (text) {
    case "/start":
      return showUserServersMenu(chatId);

    case "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞":
      userState[chatId] = { action: "add" };
      return bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ü—Ä–∏–º–µ—Ä: MyServer, 1.2.3.4");

    case "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞":
      userState[chatId] = { action: "edit_step_1" };
      return bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:");

    case "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞":
      userState[chatId] = { action: "delete" };
      return bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:");

    default:
      const server = (data[chatId] || []).find(s => s.name === text);
      if (server) {
        return bot.sendMessage(chatId, `–°–µ—Ä–≤–µ—Ä: ${server.name}\nÌ†ΩÌ≥° –ê–¥—Ä–µ—Å: ${server.address}`);
      } else {
        return bot.sendMessage(chatId, `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ${text}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start`);
      }
  }
});


export {bot};

